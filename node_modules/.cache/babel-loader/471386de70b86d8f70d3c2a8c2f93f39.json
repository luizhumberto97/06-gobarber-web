{"ast":null,"code":"var _jsxFileName = \"/home/luiz/estudos/06-gobarber-web/src/routes/Route.tsx\";\nimport React from 'react';\nimport { Route as ReactDOMRoute, Redirect } from 'react-router-dom';\nimport { useAuth } from '../hooks/auth'; // Autenticação\n\n// true / true = OK\n// true / false = Redirecioanr ele para o login\n// false/ true = Redirecionar para o Dashboard\n// false / false = OK\nconst Route = ({\n  isPrivate = false,\n  component: Component,\n  ...rest\n}) => {\n  const {\n    user\n  } = useAuth();\n  console.log(user, isPrivate);\n  return /*#__PURE__*/React.createElement(ReactDOMRoute, Object.assign({}, rest, {\n    render: ({\n      location\n    }) => {\n      // Utilizamos o location para armazenar historico\n      return isPrivate === !!user ? /*#__PURE__*/React.createElement(Component, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }) : /*#__PURE__*/React.createElement(Redirect, {\n        to: {\n          pathname: isPrivate ? '/' : '/Dashboard',\n          state: {\n            from: location\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }\n      }) // Se não está autenticado manda para o login, caso ao contrario dashboard\n      ;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default Route;","map":{"version":3,"sources":["/home/luiz/estudos/06-gobarber-web/src/routes/Route.tsx"],"names":["React","Route","ReactDOMRoute","Redirect","useAuth","isPrivate","component","Component","rest","user","console","log","location","pathname","state","from"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,KAAK,IAAIC,aADX,EAGEC,QAHF,QAKO,kBALP;AAOA,SAASC,OAAT,QAAwB,eAAxB,C,CAAyC;;AAOzC;AACA;AACA;AACA;AAEA,MAAMH,KAA2B,GAAG,CAAC;AAACI,EAAAA,SAAS,GAAG,KAAb;AAAoBC,EAAAA,SAAS,EAACC,SAA9B;AAAyC,KAAGC;AAA5C,CAAD,KAAuD;AACzF,QAAM;AAACC,IAAAA;AAAD,MAASL,OAAO,EAAtB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAAkBJ,SAAlB;AAEA,sBACE,oBAAC,aAAD,oBACIG,IADJ;AAEA,IAAA,MAAM,EAAE,CAAC;AAACI,MAAAA;AAAD,KAAD,KAAgB;AAAG;AACzB,aAAOP,SAAS,KAAK,CAAC,CAACI,IAAhB,gBACL,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,gBAGL,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AACZI,UAAAA,QAAQ,EAAER,SAAS,GAAE,GAAF,GAAQ,YADf;AAEZS,UAAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAEH;AAAR;AAFK,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHK,CAOD;AAPN;AASD,KAZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAiBD,CArBD;;AAuBA,eAAeX,KAAf","sourcesContent":["import React from 'react';\nimport {\n  Route as ReactDOMRoute,\n  RouteProps as ReactDOMRouteProps,\n  Redirect\n\n} from 'react-router-dom';\n\nimport { useAuth } from '../hooks/auth'; // Autenticação\n\ninterface RouteProps extends ReactDOMRouteProps{\n  isPrivate?: boolean;\n  component: React.ComponentType; /*Quando quero receber o componente na forma {Dashbard} */\n}\n\n// true / true = OK\n// true / false = Redirecioanr ele para o login\n// false/ true = Redirecionar para o Dashboard\n// false / false = OK\n\nconst Route: React.FC<RouteProps> = ({isPrivate = false, component:Component, ...rest}) => {\n  const {user} = useAuth();\n  console.log(user, isPrivate)\n\n  return (\n    <ReactDOMRoute\n    {...rest}\n    render={({location}) => {  // Utilizamos o location para armazenar historico\n      return isPrivate === !!user ? (\n        <Component />\n      ) : (\n        <Redirect to={{\n          pathname: isPrivate? '/' : '/Dashboard',\n          state: { from: location},\n\n      }} /> // Se não está autenticado manda para o login, caso ao contrario dashboard\n      );\n    }}\n    />\n\n  );\n};\n\nexport default Route;\n"]},"metadata":{},"sourceType":"module"}